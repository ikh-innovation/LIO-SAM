lio_sam:

  # Topics
  pointCloudTopic: "points_raw"               # Point cloud data
  imuTopic: "imu_raw"                         # IMU data
  odomTopic: "odometry/imu"                   # IMU pre-preintegration odometry, same frequency as IMU
  gpsTopic: "odometry/gps"                   # GPS odometry topic from navsat, see module_navsat.launch file

  # Frames
  lidarFrame: "$(arg test_name)/velodyne"
  baselinkFrame: "$(arg test_name)/base_link"
  odometryFrame: "$(arg test_name)/odom"
  mapFrame: "map"
  lidarLinkFrame: "$(arg test_name)/lidar_link"           # 

  # GPS Settings
  useImuHeadingInitialization: true           # if using GPS data, set to "true"
  useGpsElevation: false                      # if GPS elevation is bad, set to "false"
  gpsCovThreshold: 2.0                        # m^2, threshold for using GPS data
  poseCovThreshold: 0.00025                      # m^2, threshold for using GPS data
  
  # Export settings
  savePCD: false                              # https://github.com/TixiaoShan/LIO-SAM/issues/3
  savePCDDirectory: "/Downloads/LOAM/"        # in your home folder, starts and ends with "/". Warning: the code deletes "LOAM" folder then recreates it. See "mapOptimization" for implementation

  # # Sensor Settings
  # sensor: velodyne                            # lidar sensor type, 'velodyne' or 'ouster' or 'livox'
  # N_SCAN: 64 #16                                  # number of lidar channel (i.e., Velodyne/Ouster: 16, 32, 64, 128, Livox Horizon: 6)
  # Horizon_SCAN: 1800                          # lidar horizontal resolution (Velodyne:1800, Ouster:512,1024,2048, Livox Horizon: 4000)
  # downsampleRate: 2 #1                           # default: 1. Downsample your data if too many points. i.e., 16 = 64 / 4, 16 = 16 / 1
  # lidarMinRange: 1.0                          # default: 1.0, minimum lidar range to be used
  # lidarMaxRange: 1000.0                       # default: 1000.0, maximum lidar range to be used

  # Sensor Settings
  sensor: livox                               # lidar sensor type, 'velodyne' or 'ouster' or 'livox'
  N_SCAN: 4                                 # number of lidar channel (i.e., Velodyne/Ouster: 16, 32, 64, 128, Livox Horizon: 6)
  Horizon_SCAN: 6000                          # lidar horizontal resolution (Velodyne:1800, Ouster:512,1024,2048, Livox Horizon: 4000)
  downsampleRate: 1                           # default: 1. Downsample your data if too many points. i.e., 16 = 64 / 4, 16 = 16 / 1
  lidarMinRange: 0.1                          # default: 1.0, minimum lidar range to be used
  lidarMaxRange: 40.0                        # default: 1000.0, maximum lidar range to be used


  # IMU Settings
  imuAccNoise: 3.9939570888238808e-03       ## max(linear_acc covariance)
  imuGyrNoise: 1.5636343949698187e-03       ## max(angular_vel covariance)
  imuAccBiasN: 6.4356659353532566e-05       ## acc bias noise
  imuGyrBiasN: 3.5640318696367613e-05       ## ang_vel bias noise
  imuGravity: 9.80511
  imuRPYWeight: 0.01                        ## quaternion slerp intepolation factor [0,1]. Default (0.01) is fine. 

  # Extrinsics: T_lb (lidar -> imu)
  # extrinsicTrans: [0.0, 0.0, 0.0]
  extrinsicTrans: [0.209, 0.008, -0.420]
  extrinsicRot: [-1, 0, 0,
                  0, -1, 0,
                  0, 0, 1]               
  extrinsicRPY: [-1, 0, 0,
                  0, -1, 0,
                  0, 0, 1]

  # LOAM feature threshold
  edgeThreshold: 1.0                            ## if cloudCurvature[ind] > edgeThreshold: extract features
  surfThreshold: 0.1                            ## if cloudCurvature[ind] < surfThreshold: extract features
  edgeFeatureMinValidNum: 10 #10                 ## if lower scan2MapOptimization doesnt run
  surfFeatureMinValidNum: 100 #100               ## if lower scan2MapOptimization doesnt run

  # voxel filter params
  odometrySurfLeafSize: 0.4                     # default: 0.4 - outdoor, 0.2 - indoor  ## downsampling
  mappingCornerLeafSize: 0.2                    # default: 0.2 - outdoor, 0.1 - indoor  ## downsampling
  mappingSurfLeafSize: 0.4                      # default: 0.4 - outdoor, 0.2 - indoor  ## downsampling

  # robot motion constraint (in case you are using a 2D robot)
  z_tollerance: 1000                            # meters, ## scan2map transform update constraint
  rotation_tollerance: 1000                     # radians, ## scan2map transform update constraint

  # CPU Params
  numberOfCores: 4                              # number of cores for mapping optimization
  mappingProcessInterval: 0.15                  # seconds, regulate mapping frequency ## mapOptimization main loop frequency (check lio_sam/feature/cloud_info frequency)

  # Surrounding map
  surroundingkeyframeAddingDistThreshold: 0.5 #1.0   # meters, regulate keyframe adding threshold  ## if dist(lastKeyPose, trnasfrm2bemapped)<ths frame is not saved
  surroundingkeyframeAddingAngleThreshold: 0.2       # radians, regulate keyframe adding threshold ## if angle(lastKeyPose, trnasfrm2bemapped)<ths frame is not saved
  surroundingKeyframeDensity: 0.5 #2.0               # meters, downsample surrounding keyframe poses   
  surroundingKeyframeSearchRadius: 50.0              # meters, within n meters scan-to-map optimization (when loop closure disabled)

  # Loop closure
  loopClosureEnableFlag: true
  loopClosureFrequency: 1.0                     # Hz, regulate loop closure constraint add frequency
  surroundingKeyframeSize: 50                   # submap size (when loop closure enabled) 
  historyKeyframeSearchRadius: 15.0             # meters, key frame that is within n meters from current pose will be considerd for loop closure
  historyKeyframeSearchTimeDiff: 30.0           # seconds, key frame that is n seconds older will be considered for loop closure
  historyKeyframeSearchNum: 25                  # number of hostory key frames will be fused into a submap for loop closure
  historyKeyframeFitnessScore: 0.1 #0.3              # icp threshold, the smaller the better alignment

  # Visualization
  globalMapVisualizationSearchRadius: 1000.0    # meters, global map visualization radius
  globalMapVisualizationPoseDensity: 10.0       # meters, global map visualization keyframe density
  globalMapVisualizationLeafSize: 1.0           # meters, global map visualization cloud density




# Navsat (convert GPS coordinates to Cartesian)
navsat:
  frequency: 50
  wait_for_datum: true
  delay: 0.0
  magnetic_declination_radians: 0
  yaw_offset: 0
  zero_altitude: true
  broadcast_utm_transform: false
  broadcast_utm_transform_as_parent_frame: false
  publish_filtered_gps: false
  ## DOMOKOS DATUM
  datum:
  - 39.083527376
  - 22.3332770044
  - 0.0186451
  - map
  - aristos/base_link

# EKF for Navsat
ekf_gps:
  publish_tf: false
  map_frame: map
  odom_frame: $(arg test_name)/odom
  base_link_frame: $(arg test_name)/base_link
  world_frame: $(arg test_name)/odom

  frequency: 50
  two_d_mode: false
  sensor_timeout: 0.01
  # -------------------------------------
  # External IMU:
  # -------------------------------------
  imu0: imu_raw
  # make sure the input is aligned with ROS REP105. "imu_correct" is manually transformed by myself. EKF can also transform the data using tf between your imu and base_link
  imu0_config: [false, false, false,
                true,  true,  true,
                false, false, false,
                false, false, true,
                true,  true,  true]
  imu0_differential: false
  imu0_queue_size: 50 
  imu0_remove_gravitational_acceleration: true
  # -------------------------------------
  # Odometry (From Navsat):
  # -------------------------------------
  odom0: odometry/gps
  odom0_config: [true,  true,  true,
                 false, false, false,
                 false, false, false,
                 false, false, false,
                 false, false, false]
  odom0_differential: false
  odom0_queue_size: 10

  #                            x     y     z     r     p     y   x_dot  y_dot  z_dot  r_dot p_dot y_dot x_ddot y_ddot z_ddot
  process_noise_covariance: [  1.0,  0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    1.0,  0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    10.0, 0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0.03, 0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0.03, 0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0.1,  0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0.25,  0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0.25,  0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0.04,  0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0.01, 0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0.01, 0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0.5,  0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0.01, 0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0.01,   0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0.015]
